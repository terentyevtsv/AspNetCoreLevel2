@using WebStore.DomainNew.ViewModels
@{
    Layout = "_Layout";

    var type = Context.Request.Query.ContainsKey("categoryId")
        ? BreadCrumbType.Category
        : Context.Request.Query.ContainsKey("brandId")
            ? BreadCrumbType.Brand
            : BreadCrumbType.None;

    var fromType = BreadCrumbType.Category;

    var action = (string)ViewContext.RouteData.Values["action"];

    // Метод деталей товара?
    if (action == "ProductDetails")
    {
        // Устанавливаем тип товара
        type = BreadCrumbType.Item;
    }

    // id бренда, категории или товара
    var id = 0;

    switch (type)
    {
        case BreadCrumbType.None:
            break;
        case BreadCrumbType.Category:
            id = int.Parse(Context.Request.Query["categoryId"].ToString());
            break;
        case BreadCrumbType.Brand:
            id = int.Parse(Context.Request.Query["brandId"].ToString());
            break;
        case BreadCrumbType.Item:
            // Переход на товар через Бренд?
            if (Context.Request.Query.ContainsKey("fromBrand"))
            {
                fromType = BreadCrumbType.Brand;
            }
            id = int.Parse(ViewContext.RouteData.Values["id"].ToString());
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}


@await Component.InvokeAsync("BreadCrumbs", new { type, id, fromType })

@RenderBody()

@*@section scripts{
    @RenderSection("scripts", false)
}*@